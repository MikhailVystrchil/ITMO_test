import telebot
from telebot import types
import json
from difflib import get_close_matches

from chatbot_development.TOKEN import TOKEN

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
with open('program_data.json', 'r', encoding='utf-8') as f:
    data = json.load(f)
    programs = data['programs']

bot = telebot.TeleBot(TOKEN)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state = {}


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º",
        "üîç –ü–æ–∏—Å–∫ –∫—É—Ä—Å–∞",
        "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å"
    ]
    markup.add(*buttons)
    return markup


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö.\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º
@bot.message_handler(func=lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º")
def show_programs(message):
    markup = types.InlineKeyboardMarkup()
    for program in programs:
        btn = types.InlineKeyboardButton(
            text=program['program_name'],
            callback_data=f"program_{program['program_name']}"
        )
        markup.add(btn)

    bot.send_message(
        message.chat.id,
        "üèõ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã:",
        reply_markup=markup
    )


# –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith('program_'))
def program_details(call):
    try:
        program_name = call.data.split('_')[1]
        program = next(p for p in programs if p['program_name'] == program_name)

        response = (
            f"<b>{program['program_name']}</b> ({program['program_name_en']})\n\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {program['description']}\n"
            f"‚è≥ <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {program['duration_years']} –≥–æ–¥–∞\n"
            f"üåê <b>–Ø–∑—ã–∫:</b> {program['language'].upper()}\n"
            f"üîó <b>–°–∞–π—Ç:</b> {program['website_url']}\n\n"
            f"üìö <b>–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:</b>\n"
        )

        sample_courses = [
            course['name'] for course in
            list(program['courses_data']['courses'].values())[:5]
        ]
        response += "\n".join(f"‚Ä¢ {course}" for course in sample_courses)

        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ —Å–µ–º–µ—Å—Ç—Ä–∞–º", callback_data=f"semesters_{program_name}"),
            types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ", callback_data=f"searchin_{program_name}")
        )

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=response,
            parse_mode='HTML',
            reply_markup=markup
        )
    except Exception as e:
        print(f"Error in program_details: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


# –ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å—ã –ø–æ —Å–µ–º–µ—Å—Ç—Ä–∞–º
@bot.callback_query_handler(func=lambda call: call.data.startswith('semesters_'))
def show_semesters(call):
    try:
        program_name = call.data.split('_')[1]
        program = next(p for p in programs if p['program_name'] == program_name)

        markup = types.InlineKeyboardMarkup()
        for semester in sorted(program['courses_data']['semesters'].keys()):
            btn = types.InlineKeyboardButton(
                text=f"–°–µ–º–µ—Å—Ç—Ä {semester}",
                callback_data=f"semester_{program_name}_{semester}"
            )
            markup.add(btn)

        markup.add(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"program_{program_name}"
        ))

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ—Å—Ç—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã <b>{program_name}</b>:",
            parse_mode='HTML',
            reply_markup=markup
        )
    except Exception as e:
        print(f"Error in show_semesters: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ–º–µ—Å—Ç—Ä–æ–≤")


# –ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('semester_'))
def show_semester_courses(call):
    try:
        _, program_name, semester = call.data.split('_')
        program = next(p for p in programs if p['program_name'] == program_name)

        courses = program['courses_data']['semesters'].get(semester, [])

        response = f"üìö <b>–ö—É—Ä—Å—ã {program_name}, —Å–µ–º–µ—Å—Ç—Ä {semester}:</b>\n\n"
        for course in courses:
            response += f"‚Ä¢ {course['name']} ({course['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤, {course['hours']} —á–∞—Å–æ–≤)\n"

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É —Å–µ–º–µ—Å—Ç—Ä–æ–≤",
            callback_data=f"semesters_{program_name}"
        ))

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=response,
            parse_mode='HTML',
            reply_markup=markup
        )
    except Exception as e:
        print(f"Error in show_semester_courses: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤")


# –ü–æ–∏—Å–∫ –∫—É—Ä—Å–æ–≤
@bot.message_handler(func=lambda m: m.text == "üîç –ü–æ–∏—Å–∫ –∫—É—Ä—Å–∞")
def ask_search_query(message):
    msg = bot.send_message(
        message.chat.id,
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    bot.register_next_step_handler(msg, process_search)


def process_search(message):
    query = message.text.lower()
    results = []

    for program in programs:
        for course in program['courses_data']['courses'].values():
            if query in course['name'].lower():
                results.append((program['program_name'], course))

    if results:
        response = "üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b>\n\n"
        for program_name, course in results[:5]:
            response += (
                f"üìö <b>{course['name']}</b>\n"
                f"üèõ <i>{program_name}</i>\n"
                f"üìÖ –°–µ–º–µ—Å—Ç—Ä: {course['semester']} | üéì –ö—Ä–µ–¥–∏—Ç—ã: {course['credits']}\n\n"
            )
    else:
        all_courses = [
            course['name'] for program in programs
            for course in program['courses_data']['courses'].values()
        ]
        matches = get_close_matches(query, all_courses, n=3, cutoff=0.6)

        if matches:
            response = "‚ùå –¢–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏—Å–∫–∞–ª–∏:\n\n"
            response += "\n".join(f"‚Ä¢ {match}" for match in matches)
        else:
            response = "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."

    bot.send_message(
        message.chat.id,
        response,
        parse_mode='HTML',
        reply_markup=main_menu()
    )


# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
@bot.message_handler(func=lambda m: m.text == "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
def ask_program_for_recommendations(message):
    markup = types.InlineKeyboardMarkup()
    for program in programs:
        btn = types.InlineKeyboardButton(
            program['program_name'],
            callback_data=f"rec_program_{program['program_name']}"
        )
        markup.add(btn)

    bot.send_message(
        message.chat.id,
        "üìä –î–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É:",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('rec_program_'))
def ask_background(call):
    try:
        program_name = call.data.split('_')[2]
        user_state[call.message.chat.id] = {'program': program_name}

        bot.send_message(
            call.message.chat.id,
            f"üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ò–º–µ—é –æ–ø—ã—Ç –≤ Python –∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö'):",
            reply_markup=types.ReplyKeyboardRemove()
        )

        bot.register_next_step_handler_by_chat_id(
            call.message.chat.id,
            process_recommendations
        )
    except Exception as e:
        print(f"Error in ask_background: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


def process_recommendations(message):
    try:
        chat_id = message.chat.id
        background = message.text.lower()

        if chat_id not in user_state or 'program' not in user_state[chat_id]:
            bot.send_message(
                chat_id,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=main_menu()
            )
            return

        program_name = user_state[chat_id]['program']
        program = next(p for p in programs if p['program_name'] == program_name)

        # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        recommendations = {
            'python': ['–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python', '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (Python Backend)'],
            '–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω': ['–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–ü—Ä–∏–∫–ª–∞–¥–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤'],
            '–º–∞—à–∏–Ω–Ω': ['–û—Å–Ω–æ–≤—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –ú–û (Python)'],
            '–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç': ['–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –≤ Data Science', '–ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç'],
            '–¥–∞–Ω–Ω': ['–ò–Ω–∂–µ–Ω–µ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö', '–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'],
            '–≥–ª—É–±–æ–∫': ['–û—Å–Ω–æ–≤—ã –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è', '–ì–ª—É–±–æ–∫–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏'],
            '–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω': ['–û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞']
        }

        matched_courses = set()
        for keyword, courses in recommendations.items():
            if keyword in background:
                matched_courses.update(courses)

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫—É—Ä—Å—ã
        if not matched_courses:
            matched_courses = {
                course['name'] for course in
                list(program['courses_data']['courses'].values())[:5]
            }

        response = (
            f"üéì <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã {program_name}</b>\n"
            f"üìå –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –æ–ø—ã—Ç–∞: <i>{background}</i>\n\n"
            "–ú—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –∫—É—Ä—Å—ã:\n"
        )
        response += "\n".join(f"‚Ä¢ {course}" for course in matched_courses)

        bot.send_message(
            chat_id,
            response,
            parse_mode='HTML',
            reply_markup=main_menu()
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if chat_id in user_state:
            del user_state[chat_id]

    except Exception as e:
        print(f"Error in process_recommendations: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π",
            reply_markup=main_menu()
        )


@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
def show_help(message):
    help_text = (
        "ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n\n"
        "–Ø –ø–æ–º–æ–≥–∞—é –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –ò–¢–ú–û.\n\n"
        "üìã <b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º\n"
        "üîç <b>–ü–æ–∏—Å–∫ –∫—É—Ä—Å–∞</b> - –ø–æ–∏—Å–∫ –∫—É—Ä—Å–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n"
        "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b> - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤\n\n"
        "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ @–≤–∞—à_username"
    )

    bot.send_message(
        message.chat.id,
        help_text,
        parse_mode='HTML',
        reply_markup=main_menu()
    )


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()